import { NextResponse } from 'next/server';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// L칛s in kursinformation
async function getCourseInfo() {
  try {
    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000';
    const [basicsResponse, flowResponse] = await Promise.all([
      fetch(`${baseUrl}/functionalbasics.txt`, { cache: 'no-store' }),
      fetch(`${baseUrl}/functionalflow.txt`, { cache: 'no-store' })
    ]);
    
    if (!basicsResponse.ok || !flowResponse.ok) {
      console.error('Failed to load course info:', {
        basics: basicsResponse.status,
        flow: flowResponse.status
      });
      return { basicsText: '', flowText: '' };
    }
    
    const basicsText = await basicsResponse.text();
    const flowText = await flowResponse.text();
    
    return { basicsText, flowText };
  } catch (error) {
    console.error('Error loading course info:', error);
    return { basicsText: '', flowText: '' };
  }
}

// Konvertera markdown till HTML
function markdownToHtml(text: string): string {
  // Konvertera **text** till <strong>text</strong>
  text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
  
  // Konvertera *text* till <em>text</em>
  text = text.replace(/\*(.*?)\*/g, '<em>$1</em>');
  
  // L칛gg till styckeindelning
  const paragraphs = text.split('\n\n');
  const htmlParagraphs = paragraphs.map(p => {
    if (p.trim()) {
      return `<p>${p.trim()}</p>`;
    }
    return '';
  }).filter(p => p);
  
  return htmlParagraphs.join('');
}

export async function POST(request: Request) {
  if (!process.env.OPENAI_API_KEY) {
    console.error('Missing OPENAI_API_KEY');
    return NextResponse.json(
      { message: "<p>Konfigurationsfel. V칛nligen kontakta support.</p>" },
      { status: 500 }
    );
  }

  try {
    const { message } = await request.json();
    
    if (!message || typeof message !== 'string') {
      return NextResponse.json(
        { message: "<p>Ogiltig f칬rfr친gan. V칛nligen f칬rs칬k igen.</p>" },
        { status: 400 }
      );
    }
    
    // H칛mta kursinformation
    const { basicsText, flowText } = await getCourseInfo();
    
    const systemPrompt = `Du 칛r Ulrika AI:sson, en v칛nlig och kunnig AI-assistent f칬r Functional Foods. 
    
Du har djup kunskap om:
- Functional foods och hur mat kan anv칛ndas som medicin
- H칛lsa, nutrition och v칛lm친ende
- Recept och matlagning f칬r optimal h칛lsa
- Longevity och livsstilsfaktorer
- V친ra kurser: Functional Basics och Functional Flow

Kursinformation:
Functional Basics: ${basicsText.substring(0, 500)}...
Functional Flow: ${flowText.substring(0, 500)}...

VIKTIGA REGLER:
1. Svara ALLTID p친 svenska
2. Var v칛nlig, professionell och hj칛lpsam
3. Ge konkreta och praktiska r친d
4. Om n친gon fr친gar om n친got som INTE handlar om h칛lsa, functional foods, nutrition, recept eller longevity, svara v칛nligt att du 칛r specialiserad p친 dessa omr친den och h칛nvisa till hej@functionalfoods.se f칬r andra fr친gor
5. AVSLUTA ALDRIG MITT I EN MENING - se till att alla meningar 칛r kompletta
6. Anv칛nd styckeindelning f칬r b칛ttre l칛sbarhet - separera olika 칛mnen med tomma rader
7. H친ll svaren koncisa men kompletta (max 250 ord)
8. Rekommendera g칛rna v친ra kurser n칛r det 칛r relevant
9. Anv칛nd emojis sparsamt men effektivt f칬r att g칬ra konversationen mer personlig`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4-turbo-preview",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: message }
      ],
      max_tokens: 350, // Lite extra tokens f칬r att s칛kerst칛lla kompletta meningar
      temperature: 0.7,
      stop: null, // Ta bort stop sequences f칬r att undvika avbrott
    });

    let response = completion.choices[0].message.content || "Urs칛kta, jag kunde inte generera ett svar just nu.";
    
    // S칛kerst칛ll att svaret slutar med en komplett mening
    const lastChar = response.trim().slice(-1);
    if (!['.', '!', '?', ':', '游땕', '游꺔', '游눜'].includes(lastChar)) {
      // Om svaret inte slutar med punktuation, l칛gg till punkt
      response = response.trim() + '.';
    }
    
    // Konvertera markdown till HTML
    const htmlResponse = markdownToHtml(response);

    return NextResponse.json({ message: htmlResponse });
  } catch (error) {
    console.error('Chat error:', error);
    return NextResponse.json(
      { message: "<p>Urs칛kta, n친got gick fel. F칬rs칬k igen senare eller kontakta oss p친 hej@functionalfoods.se</p>" },
      { status: 500 }
    );
  }
} 